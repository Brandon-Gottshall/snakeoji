
## **Snakoji: A Snake Simulation Game**

Snakoji is a C-based terminal game designed to help me and others learn C development. It's more than just a game‚Äîit's a hands-on learning experience where you can see C concepts in action and contribute to improving the project. The code includes detailed explanations to make it accessible for beginners and intermediate developers exploring modular programming and game development in C.

---

### **Vision**

Snakoji is not your average snake game. Instead of classic mechanics, it simulates the life of a snake with three stats‚Äîfood, water, and entertainment. Your goal is to waddle around the game board, collect emojis representing resources, and survive as long as possible while your stats gradually decay.

This project was built to:

- Explore **C development principles**, including modular programming, file structure organization, and Makefile usage.
- Help others learn by providing **thoroughly documented code** with `Explanation:` comments for clarity.
- Foster collaboration and community contributions to expand the game's feature set.

---

### **Features**

#### **Implemented Features**

- **Basic Gameplay**:
  - Control a snake using WASD keys in a terminal.
  - Snake moves around a bordered game board.
- **Modular Code**:
  - Organized file structure with clear separation of concerns (`board`, `snake`, `utils`).
- **Terminal Compatibility**:
  - Cross-platform handling for screen clearing and input.

---

### **Planned Features**

1. **Stats Tracking**:

   - Basic stats (food, water, entertainment) displayed on the right-hand side of the game board.

2. **Stats Management**:

   - Stats (food, water, entertainment) will decay at an increasing rate as time progresses.
   - Collect emojis (e.g., üçé for food, üíß for water, üéÆ for entertainment) to replenish stats.

3. **Dynamic Gameplay**:
   - Increasing difficulty as items become scarcer.
   - Larger snakes consume resources faster.

4. **Game Over Conditions**:
   - End the game if any stat reaches zero.

5. **Animated Snake Movement**:
   - Smooth transitions between frames with better visual feedback.

6. **High Score Tracking**:
   - Save and display the longest survival time.

7. **Learning Enhancements**:
   - Include a toggle to show stats like memory usage, keypress latency, or other low-level C data during gameplay.
   - Provide a developer mode with debug output for learning.

---

### **How to Run**

1. **Clone the Repository**:

   ```bash
   git clone https://github.com/brandon-gottshall/snakoji.git
   cd snakoji
   ```

2. **Build the Project**:

   ```bash
   make
   ```

3. **Run the Game**:

   ```bash
   make run
   ```

4. **Clean the Build**:

   ```bash
   make clean
   ```

---

### **Contributing**

Snakoji is a work in progress, and contributions are welcome! If you have a feature suggestion or find a bug:

1. Open an issue ticket on the GitHub repository.
2. Describe your idea or issue in detail.
3. (Optional) Submit a pull request with your fix or feature.

---

### **Future Ideas**

Looking for inspiration? Here are some additional features we‚Äôd love to explore:

- **AI Snake Mode**: Add AI-controlled snakes that compete for resources.
- **Multiplayer Mode**: Introduce local multiplayer support.
- **Power-Ups**: Add special items like "freeze time" or "speed boost."
- **Themes**: Customize the snake and board with different skins and styles.

---

### **Why Learn from Snakoji?**

Snakoji is built with learning in mind. The code is filled with `Explanation:` comments that:

- Clarify what each function and line of code does.
- Highlight best practices for modular development.
- Show how to use Makefiles effectively for building and managing C projects.

---

### **License**

This project is licensed under the MIT License. See the `LICENSE` file for details.

---

### **Acknowledgments**

Thank you to anyone contributing ideas, features, or improvements! Let‚Äôs make Snakoji a fun and educational project for everyone.
